/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const path = require('path');
  const bodyParser = require('body-parser');
  const app = express();
  const {v4:uuid} = require('uuid');
  let todoList = [];
  
  app.use(bodyParser.json());
  
  app.get('/todos',(req,res)=>{
    res.status(200).send(todoList);
  });
  app.get('/todos/:id',(req,res)=>{
    let todoCurrent = req.params.id;
    
    let notReturned = true;
    for(let  i = 0; i<todoList.length; i++){
      if(todoList[i].id == todoCurrent){
        res.status(200).send(todoList[i]);
        notReturned = false;
        break;
      }
    }
    if(notReturned){
      res.status(404).send("Not Found");
    }
  });
  app.post('/todos',(req,res)=>{
    todoList.push({
      id: uuid(),
      title: req.body.title,
      description: req.body.description,
      completed: req.body.completed
    });
    res.status(201).json({id: todoList[todoList.length-1].id});
  });
  app.put('/todos/:id',(req,res)=>{
    let notFound = true;
    for(let i = 0; i<todoList.length; i++){
      if(todoList[i].id == req.params.id){
        notFound = false;
        if(req.body.title !=  undefined){
          todoList[i].title = req.body.title;
        }
        if(req.body.description !=  undefined){
          todoList[i].description = req.body.description;
        }
        if(req.body.completed !=  undefined){
          todoList[i].completed = req.body.completed;
        }
        break;
      }
    }
    if(notFound){
      res.status(404).send('Not Found')
    }
    else if(!notFound){
      res.status(200).send('OK');
    }
  });
  app.delete('/todos/:id',(req,res)=>{
    let notFound = true;
    for(let i = 0; i<todoList.length; i++){
      if(todoList[i].id == req.params.id){
        if(i == 0){
          todoList.shift();
        }
        else if(i == todoList.length-1){
          todoList.pop();
        }
        else{
          todoList = [...todoList.slice(0,i),...todoList.slice(i+1,todoList.length)];
        }
        notFound = false;
        res.status(200).send('OK');
      }
    }
    if(notFound){
      res.status(404).send('Not Found')
    }
  });
  app.all('*', (req, res) => {
    res.status(404).send('Route not found');
  });
  module.exports = app;
  